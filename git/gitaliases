[alias]
	st = status
	b = branch -v
	co = checkout
	c = commit -s
	fp = format-patch -M
	pl = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative --abbrev=12
	fixes = log --abbrev=12 --format='Fixes: %h (\"%s\")'
	l = log --oneline
	sp = !bash git-switch-profile
	send-rdma = send-email --to=\"Doug Ledford <dledford@redhat.com>\" --cc=linux-rdma@vger.kernel.org
	send-internal = send-email --to=linux-internal@mellanox.com
	# Usage: git signoff-rebase [base-commit]
	signoff-rebase = "!GIT_SEQUENCE_EDITOR='sed -i -re s/^pick/e/' sh -c 'git rebase -i $1 && while test -f .git/rebase-merge/interactive; do git commit --amend --signoff --no-edit && git rebase --continue; done' -"
	smatch = "!make CHECK=\"~/src/smatch/smatch -p=kernel\" C=1 drivers/infiniband/ drivers/net/ethernet/mellanox/ -s"
	sparse = "!make CHECK=\"~/src/sparse/sparse\" C=2 drivers/infiniband/ drivers/net/ethernet/mellanox/ -s"
	build-next = "!git co rdma-next && sh ~/src/merge/order.merge"
	build-queue = "!git co queue-next && git remote update saeed && git reset --hard saeed/testing/net-next && git merge --no-ff --no-edit rdma-next"
	# git sync - sync current folder
	# git sync all - sync all known folders
	sync = "!f() { if [ "r$1" = "rall" ]; then FOLDERS=(linux-rdma iproute2 smatch sparse rdma-core); for i in "${FOLDERS[@]}"; do cd $HOME/src/${i} && echo "syncing ${i}" && git sync; done; else git remote update && git push backup --mirror; fi;};f"
	ci = "!f() { git push backup --mirror; ssh -n -f dev-l-vrt-152.lab.mtl.com "COMMIT_TO_RUN=$1" 'nohup sh /labhome/leonro/src/tools/ci.sh > /dev/null 2>&1 &';};f"
	check = "!f() { git ci $1; ssh -n -f dev-l-vrt-151.lab.mtl.com "COMMIT_TO_RUN=$1" 'nohup sh /labhome/leonro/src/tools/virt.sh > /dev/null 2>&1 &';};f"
	undo = reset --hard
