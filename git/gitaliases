[alias]
	st = status
	br = branch -v
	rb = rebase -i
	rf = "!f() { git rebase -i $1~1;};f"
	co = checkout
	c = commit -s
	fp = format-patch -M --notes
	grpe = grep
	pl = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative --abbrev=12
	fixes = "!git --no-pager log --abbrev=12 -1 --format='Fixes: %h (\"%s\")'"
	fixup = commit -s --fixup
	rfix = "!f() { git fixup $1 && git rf $1;};f"
	up = add --update
	l = log --oneline
	send-internal = "!git sp work && git send-email --to=linux-internal@mellanox.com"
	send-upstream = send-email --suppress-cc=bodycc
	dirt = config gerrit.createChangeId true
	undirt = config gerrit.createChangeId false
	undo = reset --hard
	reword = commit --amend --allow-empty
	update = "!git reword --no-edit"
	rgrep = "!f() { git grep $1 drivers/infiniband/ include/rdma/ include/uapi/rdma/;};f"
	numstat = log -M --oneline --numstat --no-merges
	count = rev-list --count --no-merges
	cumulutive = diff -M --dirstat=2,cumulative
	mcp = "!f() { git cherry-pick $1 && x clean;};f"
	rcp = "!f() { git cherry-pick $1 && x by rob $2;};f"
	stat = shortlog --no-merges -e -s -n
	# Find merge commit which include specific commit
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	# See the details of merge commit returned by find-merge
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
